import { INITCONFIGINTERFACE } from './interface/interface'
import { _getVarsByKey } from './utils/tools'
import EVENT from './event/event'
import { EventBus } from 'event-bus-station'



export default class TLS {

    static EVENT = EVENT

    constructor(initConfig: INITCONFIGINTERFACE) {
        this.initComponentMemberValue(initConfig)
        this.initIMSDK(initConfig)
    }
    tim: any = null //tim的实例对象
    userName: string = ''
    userSig: string = ''
    SDKAppID: number = 0
    roomID: string = ''
    groupCustomFieldFilter: Array<string> = ['addgoods','room_status']
    userInfo: any = {}
    groupInfo: any = {}
    isSdkReady: boolean = false
    TIM: any
    eventBus = new EventBus()
    private initIMSDK(initConfig: INITCONFIGINTERFACE) {
        return new Promise(async (resolve, reject) => {
            this.TIM = initConfig.TIM
            this.tim = this.TIM.create({
                SDKAppID: initConfig.SDKAppID
            })
            // 设置 SDK 日志输出级别，详细分级请参见 setLogLevel 接口的说明
            this.tim.setLogLevel(0); // 普通级别，日志量较多，接入时建议使用
            // tim.setLogLevel(1); // release级别，SDK 输出关键信息，生产环境时建议使用
            // 微信小程序环境，注册 COS SDK
            //tim.registerPlugin({'cos-wx-sdk': COS}); // 微信小程序环境请取消本行注释，并注释掉 tim.registerPlugin({'cos-js-sdk': COS});
            // 监听事件，如：
            // 收到离线消息和会话列表同步完毕通知，接入侧可以调用 sendMessage 等需要鉴权的接口
            // event.name - TIM.EVENT.SDK_READY
            this.tim.on(this.TIM.EVENT.SDK_READY, this.sdkReady.bind(this));
            // 收到推送的单聊、群聊、群提示、群系统通知的新消息，可通过遍历 event.data 获取消息列表数据并渲染到页面
            // event.name - TIM.EVENT.MESSAGE_RECEIVED
            // event.data - 存储 Message 对象的数组 - [Message]
            this.tim.on(this.TIM.EVENT.MESSAGE_RECEIVED, this.messageRecieved.bind(this));
            // 收到自己或好友的资料变更通知
            // event.name - TIM.EVENT.PROFILE_UPDATED
            // event.data - 存储 Profile 对象的数组 - [Profile]
            this.tim.on(this.TIM.EVENT.PROFILE_UPDATED, this.profileUpdate.bind(this));
            // 收到 SDK 发生错误通知，可以获取错误码和错误信息
            // event.name - TIM.EVENT.ERROR
            // event.data.code - 错误码
            // event.data.message - 错误信息
            this.tim.on(this.TIM.EVENT.ERROR, this.error.bind(this));
            // 收到 SDK 进入 not ready 状态通知，此时 SDK 无法正常工作
            // event.name - TIM.EVENT.SDK_NOT_READY
            this.tim.on(this.TIM.EVENT.SDK_NOT_READY, this.sdkNotReady.bind(this));
            // 收到被踢下线通知
            // event.name - TIM.EVENT.KICKED_OUT
            // event.data.type - 被踢下线的原因，例如 :
            //   - TIM.TYPES.KICKED_OUT_MULT_ACCOUNT 多实例登录被踢
            //   - TIM.TYPES.KICKED_OUT_MULT_DEVICE 多终端登录被踢
            //   - TIM.TYPES.KICKED_OUT_USERSIG_EXPIRED 签名过期被踢（v2.4.0起支持）。
            this.tim.on(this.TIM.EVENT.KICKED_OUT, this.kicked.bind(this));
            // 网络状态发生改变（v2.5.0 起支持）。
            // event.name - TIM.EVENT.NET_STATE_CHANGE
            // event.data.state 当前网络状态，枚举值及说明如下：
            //   - TIM.TYPES.NET_STATE_CONNECTED - 已接入网络
            //   - TIM.TYPES.NET_STATE_CONNECTING - 连接中。很可能遇到网络抖动，SDK 在重试。接入侧可根据此状态提示“当前网络不稳定”或“连接中”
            //   - TIM.TYPES.NET_STATE_DISCONNECTED - 未接入网络。接入侧可根据此状态提示“当前网络不可用”。SDK 仍会继续重试，若用户网络恢复，SDK 会自动同步消息
            this.tim.on(this.TIM.EVENT.NET_STATE_CHANGE, this.networkChange.bind(this));

            const loginRes = await this.tim.login({
                userID: this.userName,
                userSig: this.userSig
            })
            if (loginRes) {
                if (loginRes.data.repeatLogin) {
                    this.sdkReady()
                }
                resolve(loginRes)
            } else {
                reject({})
            }
        })
    }

    public sendMessage(msg: string) {
        return new Promise(async (resolve, reject) => {
            let message = this.tim.createTextMessage({
                to: this.roomID,
                conversationType: this.TIM.TYPES.CONV_GROUP,
                // 消息优先级，用于群聊（v2.4.2起支持）。如果某个群的消息超过了频率限制，后台会优先下发高优先级的消息，详细请参考：https://cloud.tencent.com/document/product/269/3663#.E6.B6.88.E6.81.AF.E4.BC.98.E5.85.88.E7.BA.A7.E4.B8.8E.E9.A2.91.E7.8E.87.E6.8E.A7.E5.88.B6)
                // 支持的枚举值：TIM.TYPES.MSG_PRIORITY_HIGH, TIM.TYPES.MSG_PRIORITY_NORMAL（默认）, TIM.TYPES.MSG_PRIORITY_LOW, TIM.TYPES.MSG_PRIORITY_LOWEST
                // priority: TIM.TYPES.MSG_PRIORITY_NORMAL,
                payload: {
                    text: msg
                }
            });
            const senRes = await this.tim.sendMessage(message)
            if (senRes.code === 0) {
                resolve({
                    nick: this.userInfo.nick,
                    avatar: this.userInfo.avatar,
                    message: msg
                })
            } else {
                reject(senRes)
            }
        })
    }
    public async like(extension?: string) {
        return this.sendCustomMsgAndEmitEvent('LIKE', extension)
    }
    public async buy(goods: string) {
        return this.sendCustomMsgAndEmitEvent('BUY_GOODS', JSON.stringify(goods))
    }
    public async sendCustomMsgAndEmitEvent(type: string, extension?: string) {
        const message = this.tim.createCustomMessage({
            to: this.roomID,
            conversationType: this.TIM.TYPES.CONV_GROUP,
            priority: this.TIM.TYPES.MSG_PRIORITY_HIGH,
            payload: {
                data: type,
                description: '',
                extension: extension
            }
        })
        await this.tim.sendMessage(message)
        const res = {
            nick: this.userInfo.nick,
            avatar: this.userInfo.avatar,
            value: extension,
            userID:this.userInfo.userID
        }
        this.eventBus.emit(type, res)
        return res
    }
    public async useCoupon(extension?: string) {
        return this.sendCustomMsgAndEmitEvent('USE_COUPON', extension)
    }

    public sendGift(gift: string) {
        return this.sendCustomMsgAndEmitEvent('SEND_GIFT', gift)
    }
    public async exitRoom() {
        // 如果是群主，不能退出，群成员可以
        return new Promise(async (resolve, reject) => {
            if (this.userInfo.userID === this.groupInfo.ownerID) {
                resolve()
                return
            }
            const res = await this.tim.quitGroup(this.roomID)
            if (res.code === 0) {
                resolve(res.data)
            } else {
                reject(res)
            }
        })
    }
    public async joinRoom() {
        const joinRes = await this.tim.joinGroup({ groupID: this.roomID, type: this.TIM.TYPES.GRP_AVCHATROOM });
        if (joinRes.code === 0 && joinRes.data.status === "JoinedSuccess") {
            const ownerID = joinRes.data.group.ownerID
            const ownerInfo = await this.getUserInfoByID(ownerID)
            const userInfo = await this.getMyProfile()
            joinRes.data.group.ownerInfo = ownerInfo
            this.groupInfo = joinRes.data.group
            return {
                groupInfo: joinRes.data.group,
                userInfo: userInfo
            }
        } else if (joinRes.code === 0 && joinRes.data.status === 'AlreadyInGroup') {
            const groupInfo = await this.getGroupProfile()
            const userInfo = await this.getMyProfile()
            return {
                groupInfo: groupInfo,
                userInfo: userInfo
            }
        }
        return null
    }
    public getRoomInfo() {
        return this.getGroupProfile()
    }
    public async getUserInfo() {
        return this.getMyProfile()
    }

    public attention(extension?:string) {
        // return new Promise(async (resolve, reject) => {
        //     const value = _getVarsByKey(this.userInfo.profileCustomField, 'Tag_Profile_Custom_avlist')
        //     const userProfile = value ? value : JSON.stringify([])
        //     const userProfileObj = JSON.parse(userProfile)
        //     userProfileObj.push({
        //         ownerid: this.groupInfo.ownerInfo.userID
        //     })
        //     await this.tim.updateMyProfile({
        //         profileCustomField: [
        //             {
        //                 key: 'Tag_Profile_Custom_avlist',
        //                 value: JSON.stringify(userProfileObj)
        //             }
        //         ]
        //     })
        //     const res = await this.addAttention()
        //     if (res.code === 0) {
        //         resolve(res.data.group)
        //     } else {
        //         reject(res)
        //     }
        // })
        return this.sendCustomMsgAndEmitEvent('ATTENTION', extension)
    }
    public cancelAttention(extension?:string) {
        // return new Promise(async (resolve, reject) => {
        //     const value = _getVarsByKey(this.userInfo.profileCustomField, 'Tag_Profile_Custom_avlist')
        //     const userProfile = value ? value : JSON.stringify([])
        //     const userProfileObj = JSON.parse(userProfile)
        //     // userProfileObj.push({
        //     //     ownerid: this.ownerInfo.userID
        //     // })
        //     await this.tim.updateMyProfile({
        //         profileCustomField: [
        //             {
        //                 key: 'Tag_Profile_Custom_avlist',
        //                 value: JSON.stringify(userProfileObj)
        //             }
        //         ]
        //     })
        //     const res = await this.addAttention()
        //     if (res) {
        //         resolve(res)
        //     } else {
        //         reject()
        //     }
        // })
        return this.sendCustomMsgAndEmitEvent('CANCELATTENTION', extension)
    }
    public on(eventName: string, callback) {
        this.eventBus.on(eventName, callback)
    }
    private initComponentMemberValue(initConfig: INITCONFIGINTERFACE) {
        for (let i in initConfig) {
            this[i] = initConfig[i]
        }
    }
    private sdkReady() {
        this.eventBus.emit(EVENT.SDK_READY)
        this.getMyProfile()
        this.getGroupProfile()
    }
    private messageRecieved(event) {
        const data = event.data
        for (let i in data) {
            if (data[i].type === "TIMGroupTipElem") {
                const operationType = data[i].payload.operationType
                //系统消息
                if (operationType === 1) {
                    const res = {
                        nick: data[i].nick,
                        avatar: data[i].avatar,
                        userID: data[i].payload.operatorID
                    }
                    this.eventBus.emit(EVENT.JOIN_GROUP, res)
                }

                if (operationType === 2) {
                    const res = {
                        nick: data[i].nick,
                        avatar: data[i].avatar,
                        userID: data[i].payload.operatorID
                    }
                    this.eventBus.emit(EVENT.EXIT_GROUP, res)
                }
                if (operationType === 6) {
                    //修改了群资料
                    if (data[i].payload.newGroupProfile.groupCustomField&&data[i].payload.newGroupProfile.groupCustomField.length) {
                        //修改了群资料自定义字段
                        const key = data[i].payload.newGroupProfile.groupCustomField[0].key
                        const value = data[i].payload.newGroupProfile.groupCustomField[0].value
                        const map = {
                            'addgoods': 'ADD_GOODS',
                            'room_status': 'ROOM_STATUS_CHANGE'
                        }
                        this.eventBus.emit(map[key] ? map[key] : key, {
                            nick: data[i].nick,
                            avatar: data[i].avatar,
                            userID: data[i].from,
                            value: value
                        })
                    } else if (data[i].payload.newGroupProfile.notification) {
                        //修改了群公告
                        this.eventBus.emit(EVENT.NOTIFACATION, {
                            notification: data[i].payload.newGroupProfile.notification
                        })
                    }
                }
            }
            if (data[i].type === 'TIMTextElem') {
                //普通消息
                const res = {
                    nick: data[i].nick,
                    avtar: data[i].avatar,
                    message: data[i].payload.text,
                    userID: data[i].from
                }
                this.eventBus.emit(EVENT.MESSAGE, res)
            }
            if (data[i].type === "TIMCustomElem") {
                this.eventBus.emit(data[i].payload.data, {
                    nick: data[i].nick,
                    avatar: data[i].avatar,
                    value: data[i].payload.extension,
                    userID: data[i].from
                })
            }
        }
    }
    private profileUpdate(event) {
        this.eventBus.emit(EVENT.PROFILE_UPDATE, event)
    }
    private error(event) {
        this.eventBus.emit(EVENT.ERROR, event)
    }
    private kicked(event) {
        this.eventBus.emit(EVENT.KICKED, event)
    }
    private networkChange(event) {
        this.eventBus.emit(EVENT.NETWORK_CHANGE, event)
    }
    private sdkNotReady(event) {
        this.eventBus.emit(EVENT.SDK_NOT_READY, event)
    }
    private async getMyProfile() {
        const res = await this.tim.getMyProfile()
        if (res.code === 0) {
            this.userInfo = res.data
            return res.data
        }
        return null
    }
    private async getGroupProfile() {
        const res = await this.tim.getGroupProfile({
            groupID: this.roomID,
            groupCustomFieldFilter: this.groupCustomFieldFilter
        })
        if (res.code === 0) {
            const ownerId = res.data.group.ownerID
            const ownerInfo = await this.getUserInfoByID(ownerId)
            res.data.group.ownerInfo = ownerInfo
            this.groupInfo = res.data.group
            return res.data.group
        }
        return null
    }
    private async getUserInfoByID(id: string) {
        const res = await this.tim.getUserProfile({
            userIDList: [id],
        })
        if (res.code === 0) {
            return res.data[0]
        }
        return null
    }

    private async addAttention() {
        const profile = await this.getGroupProfile()
        const value = _getVarsByKey(profile.groupCustomField, 'attent')
        const groupCustomField = value || 0
        const changeRes = await this.tim.updateGroupProfile({
            groupID: this.roomID,
            groupCustomField: [{
                key: 'attent',
                value: String(Number(groupCustomField) + 1)
            }]
        })
        return changeRes
    }
}